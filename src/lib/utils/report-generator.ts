import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { format } from 'date-fns';

// Extend jsPDF type to include autoTable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: typeof autoTable;
  }
}

export interface ReportHeader {
  title: string;
  subtitle?: string;
  company?: string;
  generatedBy?: string;
  date?: Date;
}

export interface TableColumn {
  header: string;
  dataKey: string;
  width?: number;
}

export interface PDFReportOptions {
  orientation?: 'portrait' | 'landscape';
  pageSize?: 'a4' | 'letter' | 'legal';
  showFooter?: boolean;
  showPageNumbers?: boolean;
}

/**
 * Generate a PDF report with table data
 */
export function generatePDFReport(
  header: ReportHeader,
  columns: TableColumn[],
  data: any[],
  options: PDFReportOptions = {}
): jsPDF {
  const {
    orientation = 'portrait',
    pageSize = 'a4',
    showFooter = true,
    showPageNumbers = true,
  } = options;

  // Initialize PDF
  const doc = new jsPDF({
    orientation,
    unit: 'mm',
    format: pageSize,
  });

  // Colors
  const navyBlue = '#1e3a8a';
  const yellow = '#fbbf24';
  const gray = '#6b7280';

  let yPosition = 20;

  // Add report header
  doc.setFontSize(18);
  doc.setTextColor(navyBlue);
  doc.setFont('helvetica', 'bold');
  doc.text(header.title, 105, yPosition, { align: 'center' });
  yPosition += 8;

  // Add subtitle
  if (header.subtitle) {
    doc.setFontSize(12);
    doc.setTextColor(gray);
    doc.setFont('helvetica', 'normal');
    doc.text(header.subtitle, 105, yPosition, { align: 'center' });
    yPosition += 6;
  }

  // Add company and date info
  doc.setFontSize(10);
  doc.setTextColor(gray);
  if (header.company) {
    doc.text(`Company: ${header.company}`, 20, yPosition);
  }
  if (header.date) {
    doc.text(
      `Generated: ${format(header.date, 'MMMM dd, yyyy HH:mm')}`,
      orientation === 'portrait' ? 210 - 20 : 297 - 20,
      yPosition,
      { align: 'right' }
    );
  }
  yPosition += 6;

  if (header.generatedBy) {
    doc.text(`Generated by: ${header.generatedBy}`, 20, yPosition);
    yPosition += 8;
  } else {
    yPosition += 4;
  }

  // Add separator line
  doc.setDrawColor(yellow);
  doc.setLineWidth(0.5);
  doc.line(20, yPosition, orientation === 'portrait' ? 190 : 277, yPosition);
  yPosition += 8;

  // Generate table
  autoTable(doc, {
    startY: yPosition,
    head: [columns.map(col => col.header)],
    body: data.map(row =>
      columns.map(col => {
        const value = row[col.dataKey];
        // Format dates
        if (value instanceof Date) {
          return format(value, 'MMM dd, yyyy');
        }
        // Format null/undefined
        if (value === null || value === undefined) {
          return '-';
        }
        return String(value);
      })
    ),
    headStyles: {
      fillColor: navyBlue,
      textColor: '#ffffff',
      fontSize: 10,
      fontStyle: 'bold',
      halign: 'left',
    },
    bodyStyles: {
      fontSize: 9,
      textColor: '#1f2937',
    },
    alternateRowStyles: {
      fillColor: '#f9fafb',
    },
    margin: { left: 20, right: 20 },
    theme: 'grid',
    columnStyles: columns.reduce((acc, col, index) => {
      if (col.width) {
        acc[index] = { cellWidth: col.width };
      }
      return acc;
    }, {} as any),
  });

  // Add footer
  if (showFooter || showPageNumbers) {
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(gray);

      if (showFooter) {
        doc.text(
          'RRIBN Management System - Philippine Army Reserve Command',
          105,
          orientation === 'portrait' ? 287 : 200,
          { align: 'center' }
        );
      }

      if (showPageNumbers) {
        doc.text(
          `Page ${i} of ${pageCount}`,
          orientation === 'portrait' ? 210 - 20 : 297 - 20,
          orientation === 'portrait' ? 287 : 200,
          { align: 'right' }
        );
      }
    }
  }

  return doc;
}

/**
 * Download PDF file
 */
export function downloadPDF(doc: jsPDF, filename: string): void {
  doc.save(filename);
}

/**
 * Print PDF
 */
export function printPDF(doc: jsPDF): void {
  doc.autoPrint();
  window.open(doc.output('bloburl'), '_blank');
}

/**
 * Helper function to format file name
 */
export function generateFileName(
  reportType: string,
  company?: string,
  date: Date = new Date()
): string {
  const dateStr = format(date, 'yyyy-MM-dd');
  const companyStr = company ? `${company}_` : '';
  return `${companyStr}${reportType}_${dateStr}.pdf`;
}

/**
 * Helper function to get current user name for "Generated by"
 */
export function getCurrentUserName(firstName?: string, lastName?: string): string {
  if (firstName && lastName) {
    return `${firstName} ${lastName}`;
  }
  return 'Staff User';
}
